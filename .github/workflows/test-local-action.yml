name: Test Local Action

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  test-set-envvars-enabled:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      # Test the action with envvars enabled
      - name: Test mitmproxy action with envvars
        id: mitmproxy-with-envvars
        uses: ./
        with:
          enabled: true
          listen-host: '127.0.0.1'
          listen-port: '8080'
          install-cacert: true
          set-envvars: true
          passphrase: 'test-passphrase-12345'
          artifact-name: 'mitmproxy_stream_artifact_envvars-enabled-${{ matrix.os }}'

      # Test that outputs are accessible with envvars
      - name: Test outputs with envvars
        shell: bash
        run: |
          echo "Testing outputs..."
          echo "proxy-url output: '${{ steps.mitmproxy-with-envvars.outputs.proxy-url }}'"
          echo "stream-file output: '${{ steps.mitmproxy-with-envvars.outputs.stream-file }}'"
          echo "cacert-path output: '${{ steps.mitmproxy-with-envvars.outputs.cacert-path }}'"

          # Check if proxy-url is not empty
          if [ -z "${{ steps.mitmproxy-with-envvars.outputs.proxy-url }}" ]; then
            echo "❌ ERROR: proxy-url is empty!"
            exit 1
          else
            echo "✅ SUCCESS: proxy-url is set to: ${{ steps.mitmproxy-with-envvars.outputs.proxy-url }}"
          fi

          # Check if cacert-path output exists (should be set even if empty)
          echo "✅ SUCCESS: cacert-path output is available: '${{ steps.mitmproxy-with-envvars.outputs.cacert-path }}'"

          # Test that environment variables are set (when set-envvars=true)
          echo "Testing environment variables..."
          if [ -z "$http_proxy" ]; then
            echo "❌ ERROR: http_proxy environment variable not set!"
            exit 1
          else
            echo "✅ SUCCESS: http_proxy is set to: $http_proxy"
          fi

          if [ -z "$https_proxy" ]; then
            echo "❌ ERROR: https_proxy environment variable not set!"
            exit 1
          else
            echo "✅ SUCCESS: https_proxy is set to: $https_proxy"
          fi

          # Only check CURL_HOME on Windows runners
          if [ "${{ runner.os }}" = "Windows" ]; then
            if [ -z "$CURL_HOME" ]; then
              echo "❌ ERROR: CURL_HOME environment variable not set!"
              exit 1
            else
              echo "✅ SUCCESS: CURL_HOME is set to: $CURL_HOME"

              # Check if .curlrc file exists and contains expected content
              curlrc_path="$CURL_HOME/.curlrc"
              if [ -f "$curlrc_path" ]; then
                curlrc_content=$(cat "$curlrc_path")
                if echo "$curlrc_content" | grep -q "ssl-no-revoke"; then
                  echo "✅ SUCCESS: .curlrc file contains ssl-no-revoke"
                else
                  echo "❌ ERROR: .curlrc file does not contain ssl-no-revoke"
                  echo "Content: $curlrc_content"
                  exit 1
                fi
              else
                echo "❌ ERROR: .curlrc file not found at $curlrc_path"
                exit 1
              fi
            fi
          else
            echo "ℹ️ Skipping CURL_HOME check on non-Windows runner (${{ runner.os }})"
          fi

  test-set-envvars-disabled:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Checkout this repository
        uses: actions/checkout@v4

      # Test the action with envvars disabled
      - name: Test mitmproxy action without envvars
        id: mitmproxy-without-envvars
        uses: ./
        with:
          enabled: true
          listen-host: '127.0.0.1'
          listen-port: '8080'
          install-cacert: false
          set-envvars: false
          passphrase: 'test-passphrase-12345'
          artifact-name: 'mitmproxy_stream_artifact_envvars-disabled-${{ matrix.os }}'

      # Test that outputs are accessible without envvars
      - name: Test outputs without envvars
        shell: bash
        run: |
          echo "Testing outputs when set-envvars=false..."
          echo "proxy-url output: '${{ steps.mitmproxy-without-envvars.outputs.proxy-url }}'"
          echo "stream-file output: '${{ steps.mitmproxy-without-envvars.outputs.stream-file }}'"
          echo "cacert-path output: '${{ steps.mitmproxy-without-envvars.outputs.cacert-path }}'"

          # Check if proxy-url is not empty
          if [ -z "${{ steps.mitmproxy-without-envvars.outputs.proxy-url }}" ]; then
            echo "❌ ERROR: proxy-url is empty!"
            exit 1
          else
            echo "✅ SUCCESS: proxy-url is set to: ${{ steps.mitmproxy-without-envvars.outputs.proxy-url }}"
          fi

          echo "✅ SUCCESS: All outputs are working when set-envvars=false"

          # Test that environment variables are NOT set (when set-envvars=false)
          echo "Testing that environment variables are NOT set..."

          if [ -n "$http_proxy" ]; then
            echo "❌ ERROR: http_proxy environment variable should not be set but is: $http_proxy"
            exit 1
          else
            echo "✅ SUCCESS: http_proxy is not set (as expected)"
          fi

          if [ -n "$https_proxy" ]; then
            echo "❌ ERROR: https_proxy environment variable should not be set but is: $https_proxy"
            exit 1
          else
            echo "✅ SUCCESS: https_proxy is not set (as expected)"
          fi

          # Only check CURL_HOME on Windows runners
          if [ "${{ runner.os }}" = "Windows" ]; then
            if [ -n "$CURL_HOME" ]; then
              echo "❌ ERROR: CURL_HOME environment variable should not be set but is: $CURL_HOME"
              exit 1
            else
              echo "✅ SUCCESS: CURL_HOME is not set (as expected)"
            fi
          else
            echo "ℹ️ Skipping CURL_HOME check on non-Windows runner (${{ runner.os }})"
          fi
